package org.bread_experts_group.logging

import org.bread_experts_group.coder.format.huffman.BitInputStream
import org.bread_experts_group.coder.format.huffman.BitOutputStream
import org.bread_experts_group.coder.format.huffman.HuffmanBranch
import org.bread_experts_group.stream.readExtensibleULong
import org.bread_experts_group.stream.writeExtensibleLong
import org.bread_experts_group.stream.writeExtensibleULong
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
import java.nio.channels.FileChannel
import java.nio.file.Path
import java.nio.file.StandardOpenOption
import java.text.BreakIterator
import java.text.Normalizer
import java.util.*
import java.util.logging.Handler
import java.util.logging.LogRecord

/**
 * A handler for file-based, banked logging.
 * @author Miko Elbrecht
 * @since 2.32.0
 */
class BankedFileHandler(
	val bankPath: Path,
	val contentPath: Path,
	val timestampPath: Path
) : Handler() {
	@Suppress("LongLine", "SpellCheckingInspection")
	@OptIn(ExperimentalStdlibApi::class)
	companion object {
		val englishHuffman = HuffmanBranch.import(
			"6f1073116e12691374146115200b894080069c048106d2028206ff0283068a058406d1048506d40486068c058706e106880685448906b3048a06e2018b06ee018c06f1018d068d058e06ca028f06fc019006bc059106a7019206cd029306de019406f7039506cb029606ab029706eb029806f4019906ef019a06eb019b06bf039c06d0019d069d049e06c6019f06ca40a006b807a106f601a206fe01a3068b40a406d904a506e104a6068102a706e801a806e701a90621aa062bab06e901ac06d302ad063dae063eaf069205b0068a40b1065fb206e601b3068305b406f001b5069302b60640b706ea04b8063fb906e84fba06e94fbb0658bc0651bd0626be069440bf0624c006db04c106c805c20623c3065ac4063bc506d005c60659c70625c8064bc9066aca064acb0656cc0671cd0657ce0655cf062fd0064cd1064fd20652d30647d40644d5064ed60622d70627d80646d9069340da067adb0678dc0645dd0649de0650df0648e00637e10609e20643e3063ae40636e50638e60635e70639e80654e9064dea0642eb066bec0634ed0633ee0641ef062df00653f10628f20629f3065df4065bf50630f60676f70632f80631f9062efa0677fb0679fc062cfd0662fe0666ff060a70707167726d7375746475687663776c3c723d651f".hexToByteArray()
				.inputStream()
		) to 1
		val japaneseHuffman = HuffmanBranch.import(
			"".hexToByteArray()
				.inputStream()
		) to 2
		val huffmen = listOf(englishHuffman, japaneseHuffman)

		fun readMemoryBank(bank: FileChannel): MutableList<String> = buildList {
			while (bank.position() < bank.size()) {
				val initialPosition = bank.position()
				val backed = ByteBuffer.allocate(11)
				bank.read(backed)
				val data = backed.array().inputStream()
				val size = data.readExtensibleULong()
				if (size > Int.MAX_VALUE.toUInt())
					throw UnsupportedOperationException("Size is too big! [$size]")
				val compressionMethod = data.read()
				bank.position(initialPosition + (backed.capacity() - data.available()))
				val contentBacked = ByteBuffer.allocate(size.toInt())
				bank.read(contentBacked)
				when (compressionMethod) {
					0 -> add(contentBacked.array().decodeToString())
					else -> {
						huffmen.firstOrNull { (_, type) ->
							type == (compressionMethod and 0b00011111)
						}?.let { (huffman, _) ->
							val unused = compressionMethod shr 5
							val input = BitInputStream(contentBacked.array().inputStream())
							var decoded = ""
							while ((input.available() - unused) > 0) decoded += huffman.next(input)
							add(decoded)
						} ?: throw UnsupportedOperationException("Compression method [$compressionMethod]")
					}
				}
			}
		}.toMutableList()
	}

	val bank: FileChannel = FileChannel.open(
		bankPath,
		StandardOpenOption.WRITE, StandardOpenOption.CREATE,
		StandardOpenOption.READ
	)
	val content: FileChannel = FileChannel.open(
		contentPath,
		StandardOpenOption.APPEND, StandardOpenOption.CREATE
	)
	val timestamp: FileChannel = FileChannel.open(
		timestampPath,
		StandardOpenOption.WRITE, StandardOpenOption.CREATE
	)
	val memoryBank = readMemoryBank(bank)
	private var closed = false
	var timeIndex = 0uL

	init {
		val timestampBacked = ByteBuffer.allocate(10)
		val timestampData = timestampBacked.array().inputStream()
		timeIndex = timestampData.readExtensibleULong()
		timestamp.position(10)
	}

	private fun bankedWord(string: String): ULong {
		if (!memoryBank.contains(string)) {
			memoryBank.add(string)
			val plaintext = string.toByteArray()
			val (array, compression) = huffmen.firstNotNullOfOrNull { (huffman, type) ->
				if (string.all { huffman.directMap.containsKey(it) }) {
					val huffmanOutBits = BitOutputStream(ByteArrayOutputStream())
					for (char in string) huffman.write(char, huffmanOutBits)
					val unused = huffmanOutBits.position % 7
					huffmanOutBits.flush()
					val huffmanOut = huffmanOutBits.to.toByteArray()
					if (huffmanOut.size < plaintext.size) huffmanOut to (type or (unused shl 5))
					else null
				} else null
			} ?: (plaintext to 0)
			val output = ByteArrayOutputStream()
			output.writeExtensibleULong(array.size.toULong())
			output.write(compression)
			output.write(array)
			bank.write(ByteBuffer.wrap(output.toByteArray()))
		}
		return memoryBank.indexOf(string).toULong()
	}

	var recentSeconds = 0uL
	private fun timestamp(seconds: ULong): ULong {
		if (recentSeconds != seconds) {
			recentSeconds = seconds
			timestamp.position(0)
			val idStream = ByteArrayOutputStream()
			idStream.writeExtensibleULong(timeIndex++)
			timestamp.write(ByteBuffer.wrap(idStream.toByteArray()))
			timestamp.position(timestamp.size().coerceAtLeast(10))
			val timeData = ByteArrayOutputStream()
			timeData.writeExtensibleULong(seconds)
			timestamp.write(ByteBuffer.wrap(timeData.toByteArray()))
		}
		return timeIndex - 1u
	}

	var recentNanos = 0
	private val breaker = BreakIterator.getWordInstance()
	private val specifiedLevelDetails = mutableSetOf<ULong>()
	private val writtenMessages = mutableListOf<String>()
	override fun publish(record: LogRecord) {
		if (closed) throw IllegalStateException("BankedFileHandler closed")
		val output = ByteArrayOutputStream()
		val timeIndex = timestamp(record.instant.epochSecond.toULong())
		output.writeExtensibleULong(timeIndex)
		val nanos = record.instant.nano
		output.writeExtensibleLong((nanos - recentNanos).toLong())
		recentNanos = nanos
		val bankedLevelName = bankedWord(record.level.name)
		if (specifiedLevelDetails.contains(bankedLevelName)) {
			output.writeExtensibleULong(bankedLevelName shl 1)
		} else {
			if (
				record.level.resourceBundleName != null &&
				try {
					ResourceBundle.getBundle(record.level.resourceBundleName).containsKey(record.level.name)
				} catch (_: MissingResourceException) {
					false
				}
			) {
				output.writeExtensibleULong((bankedWord(record.level.resourceBundleName) shl 1) or 1u)
				output.writeExtensibleULong(bankedLevelName)
			} else output.writeExtensibleULong(bankedLevelName shl 1)
			output.writeExtensibleLong(record.level.intValue().toLong())
			specifiedLevelDetails.add(bankedLevelName)
		}
		output.writeExtensibleULong(bankedWord(record.loggerName))
		output.writeExtensibleLong(record.longThreadID)
		val recordIndex = writtenMessages.indexOf(record.message)
		if (recordIndex == -1) {
			val broken = buildList {
				val alpha = Normalizer.normalize(record.message, Normalizer.Form.NFC)
				breaker.setText(alpha)
				var from = breaker.first()
				while (true) {
					val next = breaker.next()
					if (next == BreakIterator.DONE) break
					val word = alpha.substring(from..(next - 1))
					if (word.isNotBlank()) add(word)
					from = next
				}
			}
			output.writeExtensibleULong(broken.size.toULong() shl 1)
			broken.forEach { output.writeExtensibleULong(bankedWord(it)) }
			writtenMessages.add(record.message)
		} else output.writeExtensibleULong((recordIndex.toULong() shl 1) or 1u)
		content.write(ByteBuffer.wrap(output.toByteArray()))
	}

	override fun flush() {
		bank.force(false)
		content.force(false)
		timestamp.force(false)
	}

	override fun close() {
		this.flush()
		bank.close()
		content.close()
		timestamp.close()
		closed = true
	}
}
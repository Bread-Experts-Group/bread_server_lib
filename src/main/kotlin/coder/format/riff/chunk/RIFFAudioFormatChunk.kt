package org.bread_experts_group.coder.format.riff.chunk

import org.bread_experts_group.formatTime
import org.bread_experts_group.stream.le
import org.bread_experts_group.stream.write16
import org.bread_experts_group.stream.write32
import java.io.ByteArrayOutputStream
import java.io.OutputStream
import kotlin.time.DurationUnit
import kotlin.time.toDuration

class RIFFAudioFormatChunk(
	val encoding: AudioEncoding,
	val numberOfChannels: Int,
	val sampleRate: Int,
	val byteRate: Int,
	val blockAlign: Int,
	val bitsPerSample: Int,
	misc: ByteArray
) : RIFFChunk("fmt ", misc) {
	override fun toString(): String = "RIFFChunk.\"$tag\"[$encoding, $numberOfChannels channel(s), " +
			"${sampleRate / 1000.0} kHz, $byteRate bytes/s, $bitsPerSample-bit, $blockAlign block alignment" +
			(if (data.isNotEmpty()) ", ${data.size} bytes misc data" else "") + (parent?.let { parent ->
		val dataChunk = parent.chunks.firstOrNull { it.tag == "data" } ?: return@let ""
		", ${(dataChunk.data.size.toDouble() / byteRate).toDuration(DurationUnit.SECONDS).formatTime()}"
	} ?: "") + ']'

	val encoded: ByteArray = ByteArrayOutputStream().use {
		it.write16((this.encoding.code.toShort().le()).toInt())
		it.write16((this.numberOfChannels.toShort().le()).toInt())
		it.write32(this.sampleRate.le())
		it.write32(this.byteRate.le())
		it.write16((this.blockAlign.toShort().le()).toInt())
		it.write16((this.bitsPerSample.toShort().le()).toInt())
		it.write(this.data)
		it.toByteArray()
	}

	override fun computeSize(): Long = encoded.size.toLong()
	override fun write(stream: OutputStream) {
		super.write(stream)
		stream.write(encoded)
	}

	enum class AudioEncoding(val code: Int) {
		MICROSOFT_PCM(0x1),
		MICROSOFT_ADPCM(0x2),
		MICROSOFT_IEEE_FLOAT(0x3),
		COMPAQ_VSELP(0x4),
		IBM_CVSD(0x5),
		MICROSOFT_A_LAW(0x6),
		MICROSOFT_U_LAW(0x7),
		MICROSOFT_DTS(0x8),
		DRM(0x9),
		WMA_9_SPEECH(0xA),
		MICROSOFT_WINDOWS_MEDIA_RT_VOICE(0xB),
		OKI_ADPCM(0x10),
		INTEL_IMA_DVI_ADPCM(0x11),
		VIDEOLOGIC_MEDIASPACE_ADPCM(0x12),
		SIERRA_ADPCM(0x13),
		ANTEX_G723_ADPCM(0x14),
		DSP_SOLUTIONS_DIGISTD(0x15),
		DSP_SOLUTION_DIGIFIX(0x16),
		DIALOGIC_OKI_ADPCM(0x17),
		MEDIA_VISION_ADPCM(0x18),
		HP_CU(0x19),
		HP_DYNAMIC_VOICE(0x1A),
		YAMAHA_ADPCM(0x20),
		SONARC_SPEECH_COMPRESSION(0x21),
		DSP_GROUP_TRUE_SPEECH(0x22),
		ECHO_SPEECH_CORP(0x23),
		VIRTUAL_MUSIC_AUDIOFILE_AF36(0x24),
		AUDIO_PROCESSING_TECH(0x25),
		VIRTUAL_MUSIC_AUDIOFILE_AF10(0x26),
		ACULAB_PROSODY_1612(0x27),
		MERGING_TECH_LRC(0x28),
		DOLBY_AC2(0x30),
		MICROSOFT_GSM610(0x31),
		MSN_AUDIO(0x32),
		ANTEX_ADPCME(0x33),
		CONTROL_RESOURCES_VQLPC(0x34),
		DSP_SOLUTIONS_DIGIREAL(0x35),
		DSP_SOLUTIONS_DIGIADPCM(0x36),
		CONTROL_RESOURCES_CR10(0x37),
		NATURAL_MICRO_SYSTEMS_VBX_ADPCM(0x38),
		CRYSTAL_SEMICONDUCTOR_IMA_ADPCM(0x39),
		ECHO_SPEECH_ECHOSC3(0x3A),
		ROCKWELL_ADPCM(0x3B),
		ROCKWELL_DIGITALK(0x3C),
		XEBEC_MULTIMEDIA(0x3D),
		ANTEX_G721_ADPCM(0x40),
		ANTEX_G728_CELP(0x41),
		MICROSOFT_MSG723(0x42),
		IBM_AVC_ADPCM(0x43),
		ITU_G726(0x45),
		MICROSOFT_MPEG(0x50),
		RT23_PAC(0x51),
		INSOFT_RT24(0x52),
		INSOFT_PAC(0x53),
		MP3(0x55),
		CIRRUS(0x59),
		CIRRUS_LOGIC(0x60),
		ESS_TECH_PCM(0x61),
		VOXWARE(0x62),
		CANOPUS_ATRAC(0x63),
		APICOM_G726_ADPCM(0x64),
		APICOM_G722_ADPCM(0x65),
		MICROSOFT_DSAT(0x66),
		MICROSOFT_DSAT_DISPLAY(0x67),
		VOXWARE_BYTE_ALIGNED(0x69),
		VOXWARE_AC8(0x70),
		VOXWARE_AC10(0x71),
		VOXWARE_AC16(0x72),
		VOXWARE_AC20(0x73),
		VOXWARE_METAVOICE(0x74),
		VOXWARE_METASOUND(0x75),
		VOXWARE_RT29HW(0x76),
		VOXWARE_VR12(0x77),
		VOXWARE_VR18(0x78),
		VOXWARE_TQ40(0x79),
		VOXWARE_SC3_1(0x7A),
		VOXWARE_SC3_2(0x7B),
		SOUNDSOFT(0x80),
		VOXWARE_TQ60(0x81),
		MICROSOFT_MSRT24(0x82),
		ATT_G729A(0x83),
		MOTION_PIXELS_MVI(0x84),
		DATAFUSION_G726(0x85),
		DATAFUSION_GSM610(0x86),
		ITERATED_AUDIO(0x88),
		ONLIVE(0x89),
		MULTITUDE_FT_SX20(0x8A),
		INFOCOM_G721_ADPCM(0x8B),
		CONVEDIA_G729(0x8C),
		CONGRUENCY(0x8D),
		SIEMENS_SBC24(0x91),
		SONICFOUNDRY_AC3_SPDIF(0x92),
		MEDIASONIC_G723(0x93),
		ACULAB_PROSODY_8K(0x94),
		ZYXEL_ADPCM(0x97),
		PHILIPS_LPCBB(0x98),
		STUDER_PACKED(0x99),
		MALDEN_PHONYTALK(0xA0),
		RACAL_GSM(0xA1),
		RACAL_G720A(0xA2),
		RACAL_G723_1(0xA3),
		RACAL_TETRA_ACELP(0xA4),
		NEC_AAC(0xB0),
		AAC(0xFF),
		RHETOREX_ADPCM(0x100),
		IBM_ULAW(0x101),
		IBM_ALAW(0x102),
		IBM_ADPCM(0x103),
		VIVO_G723(0x111),
		VIVO_SIREN(0x112),
		PHILIPS_CELP(0x120),
		PHILIPS_GRUNDIG(0x121),
		DIGITAL_G723(0x123),
		SANYO_LD_ADPCM(0x125),
		SIPRO_ACELPNET(0x130),
		SIPRO_ACELP4800(0x131),
		SIPRO_ACELP8V3(0x132),
		SIPRO_G729(0x133),
		SIPRO_G729A(0x134),
		SIPRO_KELVIN(0x135),
		VOICEAGE_AMR(0x136),
		DICTAPHONE_G726(0x140),
		QUALCOMM_PUREVOICE(0x150),
		QUALCOMM_HALFRATE(0x151),
		RINGZERO_TUBGSM(0x155),
		MICROSOFT_AUDIO1(0x160),
		WMA(0x161),
		WMA_PRO(0x162),
		WMA_LOSSLESS(0x163),
		WMA_PRO_SPDIF(0x164),
		UNISYS_NAP_ADPCM(0x170),
		UNISYS_NAP_ULAW(0x171),
		UNISYS_NAP_ALAW(0x172),
		UNISYS_NAP_16K(0x173),
		SYCOM_SYC008(0x174),
		SYCOM_G726L(0x175),
		SYCOM_CELP54(0x176),
		SYCOM_CELP68(0x177),
		KNOWLEDGE_ADPCM(0x178),
		FRAUNHOFER_MPEG2AAC(0x180),
		DTS_DS(0x190),
		CREATIVE_ADPCM(0x200),
		CREATIVE_FASTSPEECH8(0x202),
		CREATIVE_FASTSPEECH10(0x203),
		UHER_ADPCM(0x210),
		ULEAD_DV_ACM_1(0x215),
		ULEAD_DV_ACM_2(0x216),
		QUARTERDECK(0x220),
		ILINK_VC(0x230),
		AUREAL_RAW_SPORT(0x240),
		ESST_AC3(0x241),
		INTERACTIVE_HSX(0x250),
		INTERACTIVE_RPELP(0x251),
		CONSISTENT_CS2(0x260),
		SONY_SCX(0x270),
		SONY_SCY(0x271),
		SONY_ATRAC3(0x272),
		SONY_SPC(0x273),
		TELUM(0x280),
		TELUMIA(0x281),
		NORCOM_ADPCM(0x285),
		FUJITSU_TOWNS_SND(0x300),
		FUJITSU_UNSPECIFIED_A(0x301),
		FUJITSU_UNSPECIFIED_B(0x302),
		FUJITSU_UNSPECIFIED_C(0x303),
		FUJITSU_UNSPECIFIED_D(0x304),
		FUJITSU_UNSPECIFIED_E(0x305),
		FUJITSU_UNSPECIFIED_F(0x306),
		FUJITSU_UNSPECIFIED_G(0x307),
		FUJITSU_UNSPECIFIED_H(0x308),
		MICRONAS_DEV(0x350),
		MICRONAS_CELP833(0x351),
		BROOKTREE_DIGITAL(0x400),
		INTEL_IMC(0x401),
		LIGOS_INDEO_AUDIO(0x402),
		QDESIGN_MUSIC(0x450),
		ON2_VP7(0x500),
		ON2_VP6(0x501),
		ATT_VMPCM(0x680),
		ATT_TCP(0x681),
		YMPEG_ALPHA(0x700),
		CLEARJUMP_LITEWAVE(0x8AE),
		OLIVETTI_GSM(0x1000),
		OLIVETTI_ADPCM(0x1001),
		OLIVETTI_CELP(0x1002),
		OLIVETTI_SBC(0x1003),
		OLIVETTI_OPR(0x1004),
		LH_CODEC(0x1100),
		LH_CELP(0x1101),
		LH_SBC1(0x1102),
		LH_SBC2(0x1103),
		LH_SBC3(0x1104),
		NORRIS(0x1400),
		ISIAUDIO(0x1401),
		ATT_SSPMC(0x1500),
		VOXWARE_RT24(0x181C),
		LUCENT_AX24000P(0x181E),
		SONICFOUNDRY_LOSSLESS(0x1971),
		INNINGS_ADPCM(0x1979),
		LUCENT_SX8300P(0x1C07),
		LUCENT_SX5363S(0x1C0C),
		CUSEEME_DIGITALK(0x1F03),
		NCT_SOFT_ALF2CD(0x1FC4),
		FAST_MULTIMEDIA_DVM(0x2000),
		DOLBY_DTS(0x2001),
		REALAUDIO_14_4(0x2002),
		REALAUDIO_28_8(0x2003),
		REALAUDIO_COOK(0x2004),
		REALAUDIO_DNET(0x2005),
		REALAUDIO_RAAC(0x2006),
		REALAUDIO_RACP(0x2007),
		MAKEAVIS(0x3313),
		DIVIO_MPEG4_AAC(0x4143),
		NOKIA_AMR(0x4201),
		DIVIO_G726(0x4243),
		LEAD_SPEECH(0x434C),
		LEAD_VORBIS(0x564C),
		WAVPACK(0x5756),
		OGG_VORBIS_MODE1(0x674F),
		OGG_VORBIS_MODE2(0x6750),
		OGG_VORBIS_MODE3(0x6751),
		OGG_VORBIS_MODE1P(0x676F),
		OGG_VORBIS_MODE2P(0x6770),
		OGG_VORBIS_MODE3P(0x6771),
		THREECOM_NBX(0x7000),
		FAAD_AAC(0x706D),
		GSM_AMR_CBR(0x7A21),
		GSM_AMR_VBR(0x7A22),
		COMVERSE_G723_1(0xA100),
		COMVERSE_AVQSBC(0xA101),
		COMVERSE_OLDSBC(0xA102),
		SYMBOL_G729A(0xA103),
		VOICEAGE_AMR_WB(0xA104),
		INGENIENT_G726(0xA105),
		ISO_MPEG4_AAC(0xA106),
		ENCORE_G726(0xA107),
		SPEEX(0xA109),
		DEBUGMODE_FRAMESERVER(0xDFAC),
		UNKNOWN_E708(0xE708),
		FLAC(0xF1AC),
		EXTENSIBLE(0xFFFE);

		companion object {
			val mapping: Map<Int, RIFFAudioFormatChunk.AudioEncoding> = entries.associateBy(AudioEncoding::code)
		}
	}
}